# .github/workflows/cd.yml
name: Deploy to EC2 (Docker Compose)

on:
  push:
    branches: [ main ]   # change if your default branch is different
  workflow_dispatch: {}

concurrency:
  group: cd-ec2-${{ github.ref }}
  cancel-in-progress: true

env:
  EC2_PATH: /home/ec2-user/app
  SSH_PORT: 22
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_PORT: ${{ secrets.EC2_PORT }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host key to known_hosts
        run: |
          set -euo pipefail
          : "${EC2_HOST:?EC2_HOST secret is not set}"
          PORT="${EC2_PORT:-${SSH_PORT}}"
          mkdir -p ~/.ssh
          ssh-keyscan -T 5 -p "$PORT" -H "$EC2_HOST" >> ~/.ssh/known_hosts

      - name: Rsync project to EC2
        run: |
          set -euo pipefail
          PORT="${EC2_PORT:-${SSH_PORT}}"
          RSYNC_RSH="ssh -p $PORT -o StrictHostKeyChecking=accept-new"
          # Exclude typical junk and keep server .env (if you store secrets there)
          rsync -az --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '__pycache__' \
            --exclude '.venv' \
            --exclude '.DS_Store' \
            --exclude '.env' \
            -e "$RSYNC_RSH" \
            ./ "${EC2_USER:-ubuntu}@${EC2_HOST}:$EC2_PATH"

      - name: Ensure Docker & Compose on EC2 (Ubuntu-friendly)
        run: |
          set -euo pipefail
          PORT="${EC2_PORT:-${SSH_PORT}}"
          ssh -p "$PORT" "${EC2_USER:-ubuntu}@${EC2_HOST}" bash -lc '
            set -euo pipefail
            if ! command -v docker >/dev/null 2>&1; then
              if command -v apt-get >/dev/null 2>&1; then
                # Ubuntu/Debian
                sudo apt-get update -y
                sudo apt-get install -y ca-certificates curl
                sudo install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc >/dev/null
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo $VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
                sudo apt-get update -y
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                sudo usermod -aG docker \"$USER\" || true
              elif command -v yum >/dev/null 2>&1; then
                # Amazon Linux/CentOS
                sudo yum update -y
                sudo yum install -y docker
                sudo service docker start
                sudo usermod -aG docker \"$USER\" || true
                sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi
            fi
            docker --version
            docker compose version
          '

      - name: Build & restart via Docker Compose on EC2
        run: |
          set -euo pipefail
          PORT="${EC2_PORT:-${SSH_PORT}}"
          ssh -p "$PORT" "${EC2_USER:-ubuntu}@${EC2_HOST}" bash -lc '
            set -euo pipefail
            cd "$EC2_PATH"
            # Pull remote images (if any), build local ones, then up -d
            docker compose pull || true
            docker compose build --pull
            docker compose up -d
            docker compose ps
          '
